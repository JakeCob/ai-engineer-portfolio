{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeSlug from 'rehype-slug';\nimport remarkGfm from 'remark-gfm';\nimport readingTime from 'reading-time';\n\nexport const Project = defineDocumentType(() => ({\n  name: 'Project',\n  filePathPattern: 'projects/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    summary: { type: 'string', required: true },\n    tags: { type: 'list', of: { type: 'string' }, required: true },\n    domain: { type: 'string', required: true },\n    skills: { type: 'list', of: { type: 'string' }, required: true },\n    metrics: { type: 'json' },\n    repoUrl: { type: 'string' },\n    demoUrl: { type: 'string' },\n    coverImage: { type: 'string' },\n    publishedAt: { type: 'date', required: true },\n  },\n  computedFields: {\n    slug: { type: 'string', resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, '') },\n    readingTime: { type: 'number', resolve: (doc) => Math.ceil(readingTime(doc.body.raw).minutes) },\n  },\n}));\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: 'posts/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    summary: { type: 'string', required: true },\n    tags: { type: 'list', of: { type: 'string' }, required: true },\n    coverImage: { type: 'string' },\n    publishedAt: { type: 'date', required: true },\n  },\n  computedFields: {\n    slug: { type: 'string', resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, '') },\n    readingTime: { type: 'number', resolve: (doc) => Math.ceil(readingTime(doc.body.raw).minutes) },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Project, Post],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, { behavior: 'wrap' }]],\n  },\n});"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,4BAA4B;AACnC,OAAO,gBAAgB;AACvB,OAAO,eAAe;AACtB,OAAO,iBAAiB;AAEjB,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,IAC7D,QAAQ,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACzC,QAAQ,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,IAC/D,SAAS,EAAE,MAAM,OAAO;AAAA,IACxB,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,YAAY,EAAE,MAAM,SAAS;AAAA,IAC7B,aAAa,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,EAC9C;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM,EAAE,MAAM,UAAU,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE,EAAE;AAAA,IACxF,aAAa,EAAE,MAAM,UAAU,SAAS,CAAC,QAAQ,KAAK,KAAK,YAAY,IAAI,KAAK,GAAG,EAAE,OAAO,EAAE;AAAA,EAChG;AACF,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,IAC7D,YAAY,EAAE,MAAM,SAAS;AAAA,IAC7B,aAAa,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,EAC9C;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM,EAAE,MAAM,UAAU,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE,EAAE;AAAA,IACxF,aAAa,EAAE,MAAM,UAAU,SAAS,CAAC,QAAQ,KAAK,KAAK,YAAY,IAAI,KAAK,GAAG,EAAE,OAAO,EAAE;AAAA,EAChG;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,SAAS,IAAI;AAAA,EAC7B,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe,CAAC,YAAY,CAAC,wBAAwB,EAAE,UAAU,OAAO,CAAC,CAAC;AAAA,EAC5E;AACF,CAAC;",
  "names": []
}
